// This is your Prisma schema file
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  fullName       String
  profileImage   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Extended profile fields
  bio            String?
  location       String?
  company        String?
  jobTitle       String?
  industry       String?
  experience     String?
  skills         String? // JSON string of skills array
  interests      String? // JSON string of interests array
  linkedinUrl    String?
  twitterUrl     String?
  websiteUrl     String?
  phoneNumber    String?
  timezone       String?
  
  // Startup specific
  startupStage   String? // "idea", "prototype", "mvp", "growth", "scaling"
  fundingStage   String? // "pre-seed", "seed", "series-a", etc.
  teamSize       Int?
  lookingFor     String? // JSON string of looking for array
  
  // Preferences
  availableForMentoring Boolean @default(false)
  openToInvestment      Boolean @default(false)
  willingToRelocate     Boolean @default(false)
  
  // Relations
  founder        Founder?
  sentConnections     Connection[] @relation("ConnectionSender")
  receivedConnections Connection[] @relation("ConnectionReceiver")
  sentMessages        Message[]    @relation("MessageSender")
  receivedMessages    Message[]    @relation("MessageReceiver")
  
  // Events
  createdEvents  Event[] @relation("EventCreator")
  attendingEvents EventAttendee[]
}

model Founder {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  companyName   String
  industry      String
  fundingStage  String
  location      String
  bio           String?
  website       String?
  linkedIn      String?
  twitter       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  skills        Skill[]
  interests     Interest[]
}

model Connection {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending") // "pending", "accepted", "declined", "blocked"
  message    String?  // Optional message when sending connection request
  
  sender     User     @relation("ConnectionSender", fields: [senderId], references: [id])
  receiver   User     @relation("ConnectionReceiver", fields: [receiverId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([senderId, receiverId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  type       String   @default("text") // "text", "image", "file", "video_call"
  fileUrl    String?  // For file attachments
  isRead     Boolean  @default(false)
  isEdited   Boolean  @default(false)
  
  senderId   String
  receiverId String
  
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  // For threading/replies
  parentId   String?
  parent     Message? @relation("MessageReplies", fields: [parentId], references: [id])
  replies    Message[] @relation("MessageReplies")
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // "networking", "pitch", "workshop", "conference"
  location    String?  // Physical location
  virtualLink String?  // Virtual meeting link
  startTime   DateTime
  endTime     DateTime
  maxAttendees Int?
  isPublic    Boolean  @default(true)
  tags        String?  // JSON string of tags array
  
  creatorId   String
  creator     User     @relation("EventCreator", fields: [creatorId], references: [id])
  
  attendees   EventAttendee[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EventAttendee {
  id        String @id @default(cuid())
  userId    String
  eventId   String
  status    String @default("pending") // "pending", "confirmed", "declined"
  
  user      User   @relation(fields: [userId], references: [id])
  event     Event  @relation(fields: [eventId], references: [id])
  
  createdAt DateTime @default(now())
  
  @@unique([userId, eventId])
}

model Skill {
  id        String   @id @default(cuid())
  name      String   @unique
  founders  Founder[]
}

model Interest {
  id        String   @id @default(cuid())
  name      String   @unique
  founders  Founder[]
}
